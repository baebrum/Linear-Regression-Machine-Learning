function [beta, J_history] = gradientDescent(X, y, beta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn beta by
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);
n = length(beta); % number of features

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               beta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %

%     for k = 1:n
%         dSSE = 0;
%         temp = 0;
%        for i=1:m
%            dSSE = dSSE + X(i,k)*(y(i)-beta*X(i,:));
%        end
%        temp= dSSE(1,1);
%        beta(k) = beta(k) - alpha*(-2)*temp;
%     end


%     temp_beta = beta;
% 	for j = 1:n		
% 		value = 0;
% 
% 		for i = 1:m
% 			value = value + (X(i,:) * beta- y(i,:)) * X(i,j);
% 		end
% 
% 		temp_beta(j,:) = temp_beta(j,:) - ((alpha/m)*value);
% 	end
% 
% 	beta = temp_beta;
% 

%     t1 = beta(1) - alpha * (1 / m) * sum(((X * beta) - y) .* X(:, 1));
%     t2 = beta(2) - alpha * (1 / m) * sum(((X * beta) - y) .* X(:, 2));
%     t3 = beta(3) - alpha * (1 / m) * sum(((X * beta) - y) .* X(:, 3));
%     t4 = beta(4) - alpha * (1 / m) * sum(((X * beta) - y) .* X(:, 4));
%     
%     
%     % Feed our new beta values before computing cost.
% 	% Not done inline 
%     beta(1) = t1;
%     beta(2) = t2;
%     beta(3) = t3;
%     beta(4) = t4;

    % beta = beta - (alpha/m)*(X'*(X*beta-y));
    %beta = beta -((1/m) * ((X * beta) - y)' * X)' * alpha;
    
    for k=1:n %features
        total = 0;
       for i=1:m %samples
           total = total + X(i,k)*(y(i) - X(i,:)*beta);
       end
       beta(k) = beta(k) - alpha*-2*total;
    end
    

    % ============================================================

    % Save the cost J in every iteration 
    
    % ====================== YOUR CODE HERE ======================
    J_history(iter) = computeCost(X, y, beta);
  

    % ============================================================
end

end
